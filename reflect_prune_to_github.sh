#!/usr/bin/env bash
# reflect_prune_to_github.sh
# Reflete no GitHub o commit com as dele√ß√µes j√° realizadas (412 arquivos).
# - Faz sanity checks
# - Faz push do branch atual para origin
# - Se n√£o for "main", tenta abrir um PR automaticamente (se "gh" estiver dispon√≠vel)

set -euo pipefail

# 1) Checagens b√°sicas
git rev-parse --is-inside-work-tree >/dev/null 2>&1 || { echo "‚ùå N√£o √© um reposit√≥rio Git."; exit 1; }
REMOTE_URL="$(git remote get-url origin 2>/dev/null || true)"
[[ -n "${REMOTE_URL}" ]] || { echo "‚ùå Remoto 'origin' n√£o configurado."; exit 1; }

# 2) Estado e branch atual
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
AHEAD="$(git rev-list --left-right --count origin/${BRANCH}...HEAD 2>/dev/null | awk '{print $1}' || echo 0)"
DIRTY="$(git status --porcelain | wc -l | tr -d ' ')"

echo "üì¶ Repo   : $(basename "$(pwd)")"
echo "üåø Branch : ${BRANCH}"
echo "üîó Origin : ${REMOTE_URL}"

# 3) Garante que n√£o h√° altera√ß√µes n√£o commitadas (evita push parcial)
if [[ "${DIRTY}" != "0" ]]; then
  echo "‚ùå H√° altera√ß√µes n√£o commitadas. Fa√ßa commit antes."
  exit 1
fi

# 4) Busca remotos e valida branch remoto
git fetch origin --prune

# 5) Push do branch atual
echo "üöÄ Enviando branch '${BRANCH}' para origin‚Ä¶"
git push -u origin "${BRANCH}"

# 6) Se branch n√£o for main, tenta abrir PR automaticamente (opcional)
if [[ "${BRANCH}" != "main" ]]; then
  if command -v gh >/dev/null 2>&1; then
    echo "üß≠ Criando Pull Request: main ‚Üê ${BRANCH}"
    gh pr create --fill --base main --head "${BRANCH}" || {
      echo "‚ö†Ô∏è  N√£o consegui criar PR via gh. Abra manualmente no GitHub: compare main ‚Üê ${BRANCH}."
    }
  else
    echo "‚ÑπÔ∏è  gh n√£o encontrado. Abra o PR manualmente no GitHub (compare main ‚Üê ${BRANCH})."
  fi
else
  echo "‚úÖ Branch 'main' atualizado no remoto."
fi

echo "‚ú® Pronto. As dele√ß√µes j√° est√£o refletidas no reposit√≥rio remoto."
