#!/usr/bin/env bash
set -euo pipefail

# ======================================================
#  Arquiva scripts legados DENTRO do reposit√≥rio:
#  docs/archive/legacy-scripts-<TS>/...
#  Uso:
#    DRY_RUN=1 ./archive_finmath_scripts_into_repo.sh  # s√≥ lista
#           ./archive_finmath_scripts_into_repo.sh      # executa
# ======================================================

TS="$(date +%Y%m%d-%H%M%S)"
BRANCH="chore/archive-scripts-${TS}"
ARCHIVE_ROOT="docs/archive/legacy-scripts-${TS}"
DRY_RUN="${DRY_RUN:-0}"   # DRY_RUN=1 para simular

say() { echo -e "$@"; }
cmd() { say "  $*"; [[ "$DRY_RUN" == "1" ]] || eval "$*"; }

# --- 0) Pr√©-checagens
git rev-parse --is-inside-work-tree >/dev/null
if ! git diff --quiet || ! git diff --cached --quiet; then
  say "‚ö†Ô∏è  Working tree tem mudan√ßas. Fa√ßa commit/stash antes."
  exit 1
fi

say "‚ñ∂ Arquivo interno de scripts ‚Äî TS=${TS}  DRY_RUN=${DRY_RUN}"

# --- 1) Criar branch
cmd git switch -c "${BRANCH}"

# --- 2) Selecionar candidatos (scripts legados)
#     - .sh na raiz
#     - tudo sob scripts/ e tools/scripts/
#     - .sh ‚Äúperdidos‚Äù em packages/ui, apps, etc.
#     - scripts cl√°ssicos da raiz (teste-geral*.sh, validate-*, UPDATE-SPRINTS.sh etc.)
mapfile -t CAND < <(git ls-tree -r --name-only HEAD | \
  grep -E '^([^/]+\.sh|scripts/|tools/scripts/|apps/[^/]+\.sh|packages/ui/[^/]+\.sh)$' || true)

EXTRAS=(
  "UPDATE-SPRINTS.sh"
  "validate-sprint4.sh"
  "teste-geral-completo.sh"
  "teste-geral-completo-v2.sh"
  "teste-geral-final.sh"
  "teste-geral-final-v2.sh"
  "scripts/sprint2-dev"
  "tools/scripts"
)
for p in "${EXTRAS[@]}"; do
  if git ls-files --error-unmatch "$p" >/dev/null 2>&1; then
    CAND+=("$p")
  fi
done

# Desduplicar
TMP="$(mktemp)"; printf "%s\n" "${CAND[@]}" | sort -u > "$TMP"; mapfile -t CAND < "$TMP"; rm -f "$TMP"

# --- 3) Itens tempor√°rios (n√£o arquivar; vamos remover)
#     Mantemos apenas scripts no archive; snapshots/logs saem.
TRASH=(
  "_snapshot_reports"
  "snapshot-amostra.txt"
  "snapshot_00.part" "snapshot_01.part" "snapshot_02.part"
  "snapshot_03.part" "snapshot_04.part" "snapshot_05.part" "snapshot_06.part"
)

say "üß≠ Scripts a arquivar (${#CAND[@]}):"
for p in "${CAND[@]}"; do say "  - $p"; done

say "üßπ Artefatos tempor√°rios a remover (${#TRASH[@]}):"
for t in "${TRASH[@]}"; do
  if git ls-files --error-unmatch "$t" >/dev/null 2>&1; then
    say "  - $t"
  fi
done

if [[ "$DRY_RUN" == "1" ]]; then
  say "üîé DRY-RUN ativo ‚Äî nada ser√° alterado."
  exit 0
fi

# --- 4) Criar raiz do archive
cmd mkdir -p "${ARCHIVE_ROOT}"

# --- 5) Mover scripts para docs/archive preservando estrutura
move_preserving_path() {
  local src="$1"
  local dest="${ARCHIVE_ROOT}/${src}"
  local dest_dir
  dest_dir="$(dirname "$dest")"
  cmd mkdir -p "$dest_dir"
  cmd git mv "$src" "$dest"
}

# mover diret√≥rios inteiros ‚Äúscripts/‚Äù e ‚Äútools/scripts/‚Äù primeiro (se ainda existem)
for d in "scripts" "tools/scripts" "scripts/sprint2-dev"; do
  if git ls-files --error-unmatch "$d" >/dev/null 2>&1; then
    # mover diret√≥rio inteiro para archive mantendo nome/estrutura
    dest="${ARCHIVE_ROOT}/${d%/}"
    cmd mkdir -p "$(dirname "$dest")"
    cmd git mv "$d" "$dest"
    # e retirar poss√≠veis entradas j√° inclu√≠das nos CAND
    CAND=("${CAND[@]/$d}")
  fi
done

# mover arquivos restantes (ex.: *.sh na raiz, packages/ui/*.sh, apps/*.sh, etc.)
for f in "${CAND[@]}"; do
  [[ -z "$f" ]] && continue
  if git ls-files --error-unmatch "$f" >/dev/null 2>&1; then
    move_preserving_path "$f"
  fi
done

# --- 6) Remover artefatos tempor√°rios
for t in "${TRASH[@]}"; do
  if git ls-files --error-unmatch "$t" >/dev/null 2>&1; then
    # se diret√≥rio:
    if [[ -d "$t" ]]; then cmd git rm -r "$t"; else cmd git rm -f "$t"; fi
  fi
done

# --- 7) Refor√ßar .gitignore (sem bloquear docs/archive)
IGNORES=$'\n# --- block legacy local scripts (exceto docs/archive) ---\n/*.sh\n/tools/scripts/\n/scripts/\n/_snapshot_reports/\n/snapshot_*.part\n*.Zone.Identifier\n'
cmd "printf \"%s\" \"${IGNORES}\" >> .gitignore"

# --- 8) Pol√≠tica clara
cmd mkdir -p docs
cat > docs/SCRIPTS_POLICY.md <<'MD'
# Pol√≠tica de Scripts Locais (FinMath)

**N√£o usamos scripts locais em produ√ß√£o.**
- Toda automa√ß√£o roda no **CI (GitHub Actions)**, orquestrada pelo **F√™nix** (branch protegida + checks).
- Altera√ß√µes **devem** passar por **Pull Request** com **auto-merge (squash)** e checagens verdes.
- Scripts legados foram **arquivados** em `docs/archive/` apenas para refer√™ncia hist√≥rica. **N√£o execute**.

**Como trabalhar:**
1. Crie uma branch da sprint (ex.: `sprint-N`) ou da HU (`feat/hNN-...`).
2. Abra PR para `main`.
3. Aguarde checks do F√™nix (lint, typecheck, testes, build, OpenAPI).
4. Fa√ßa merge (squash) quando tudo estiver verde.

D√∫vidas? Veja `README.md` e `docs/SPRINTS.md`.
MD

# --- 9) Commit
cmd git add .gitignore docs/SCRIPTS_POLICY.md "${ARCHIVE_ROOT}"
cmd git commit -m "chore: arquiva scripts locais em ${ARCHIVE_ROOT}, remove tempor√°rios e refor√ßa pol√≠tica sem scripts locais"

# --- 10) PR (auto-merge) ‚Äî opcional
if command -v gh >/dev/null 2>&1; then
  cmd git push -u origin "${BRANCH}"
  cmd gh pr create --base main --head "${BRANCH}" \
    -t "chore: arquivar scripts locais + pol√≠tica sem scripts (CI-first)" \
    -b "Move scripts legados para ${ARCHIVE_ROOT}, remove artefatos tempor√°rios e refor√ßa .gitignore. **N√£o execute** scripts arquivados; fluxo √© 100% via PR + F√™nix."
  # auto-merge (squash) assim que checks passarem
  cmd "gh pr merge --auto --squash || true"
  say "‚úÖ PR aberto. Deixe o F√™nix validar e efetivar o merge."
else
  say "‚ÑπÔ∏è  gh CLI n√£o encontrado. Fa√ßa push e abra PR manualmente."
fi

say "üéâ Conclu√≠do."
